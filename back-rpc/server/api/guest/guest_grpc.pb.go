// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: server/api/guest/guest.proto

package guest

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Guest_GetAllGuestFromParty_FullMethodName = "/guest.Guest/GetAllGuestFromParty"
	Guest_AddGuestToParty_FullMethodName      = "/guest.Guest/AddGuestToParty"
	Guest_UpdateGuest_FullMethodName          = "/guest.Guest/UpdateGuest"
	Guest_DeleteGuestFromParty_FullMethodName = "/guest.Guest/DeleteGuestFromParty"
	Guest_GetShareLink_FullMethodName         = "/guest.Guest/GetShareLink"
	Guest_AddGuestWithLink_FullMethodName     = "/guest.Guest/AddGuestWithLink"
)

// GuestClient is the client API for Guest service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GuestClient interface {
	GetAllGuestFromParty(ctx context.Context, in *GetAllGuestFromRequest, opts ...grpc.CallOption) (*GuestsResponse, error)
	AddGuestToParty(ctx context.Context, in *AddGuestRequest, opts ...grpc.CallOption) (*GuestsResponse, error)
	UpdateGuest(ctx context.Context, in *UpdateGuestRequest, opts ...grpc.CallOption) (*GuestResponse, error)
	DeleteGuestFromParty(ctx context.Context, in *GuestRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	GetShareLink(ctx context.Context, in *GuestRequest, opts ...grpc.CallOption) (*LinkQuery, error)
	AddGuestWithLink(ctx context.Context, in *LinkQuery, opts ...grpc.CallOption) (*GuestResponse, error)
}

type guestClient struct {
	cc grpc.ClientConnInterface
}

func NewGuestClient(cc grpc.ClientConnInterface) GuestClient {
	return &guestClient{cc}
}

func (c *guestClient) GetAllGuestFromParty(ctx context.Context, in *GetAllGuestFromRequest, opts ...grpc.CallOption) (*GuestsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GuestsResponse)
	err := c.cc.Invoke(ctx, Guest_GetAllGuestFromParty_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guestClient) AddGuestToParty(ctx context.Context, in *AddGuestRequest, opts ...grpc.CallOption) (*GuestsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GuestsResponse)
	err := c.cc.Invoke(ctx, Guest_AddGuestToParty_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guestClient) UpdateGuest(ctx context.Context, in *UpdateGuestRequest, opts ...grpc.CallOption) (*GuestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GuestResponse)
	err := c.cc.Invoke(ctx, Guest_UpdateGuest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guestClient) DeleteGuestFromParty(ctx context.Context, in *GuestRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, Guest_DeleteGuestFromParty_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guestClient) GetShareLink(ctx context.Context, in *GuestRequest, opts ...grpc.CallOption) (*LinkQuery, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LinkQuery)
	err := c.cc.Invoke(ctx, Guest_GetShareLink_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guestClient) AddGuestWithLink(ctx context.Context, in *LinkQuery, opts ...grpc.CallOption) (*GuestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GuestResponse)
	err := c.cc.Invoke(ctx, Guest_AddGuestWithLink_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GuestServer is the server API for Guest service.
// All implementations must embed UnimplementedGuestServer
// for forward compatibility.
type GuestServer interface {
	GetAllGuestFromParty(context.Context, *GetAllGuestFromRequest) (*GuestsResponse, error)
	AddGuestToParty(context.Context, *AddGuestRequest) (*GuestsResponse, error)
	UpdateGuest(context.Context, *UpdateGuestRequest) (*GuestResponse, error)
	DeleteGuestFromParty(context.Context, *GuestRequest) (*empty.Empty, error)
	GetShareLink(context.Context, *GuestRequest) (*LinkQuery, error)
	AddGuestWithLink(context.Context, *LinkQuery) (*GuestResponse, error)
	mustEmbedUnimplementedGuestServer()
}

// UnimplementedGuestServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGuestServer struct{}

func (UnimplementedGuestServer) GetAllGuestFromParty(context.Context, *GetAllGuestFromRequest) (*GuestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllGuestFromParty not implemented")
}
func (UnimplementedGuestServer) AddGuestToParty(context.Context, *AddGuestRequest) (*GuestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddGuestToParty not implemented")
}
func (UnimplementedGuestServer) UpdateGuest(context.Context, *UpdateGuestRequest) (*GuestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGuest not implemented")
}
func (UnimplementedGuestServer) DeleteGuestFromParty(context.Context, *GuestRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGuestFromParty not implemented")
}
func (UnimplementedGuestServer) GetShareLink(context.Context, *GuestRequest) (*LinkQuery, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShareLink not implemented")
}
func (UnimplementedGuestServer) AddGuestWithLink(context.Context, *LinkQuery) (*GuestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddGuestWithLink not implemented")
}
func (UnimplementedGuestServer) mustEmbedUnimplementedGuestServer() {}
func (UnimplementedGuestServer) testEmbeddedByValue()               {}

// UnsafeGuestServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GuestServer will
// result in compilation errors.
type UnsafeGuestServer interface {
	mustEmbedUnimplementedGuestServer()
}

func RegisterGuestServer(s grpc.ServiceRegistrar, srv GuestServer) {
	// If the following call pancis, it indicates UnimplementedGuestServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Guest_ServiceDesc, srv)
}

func _Guest_GetAllGuestFromParty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllGuestFromRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuestServer).GetAllGuestFromParty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Guest_GetAllGuestFromParty_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuestServer).GetAllGuestFromParty(ctx, req.(*GetAllGuestFromRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Guest_AddGuestToParty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddGuestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuestServer).AddGuestToParty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Guest_AddGuestToParty_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuestServer).AddGuestToParty(ctx, req.(*AddGuestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Guest_UpdateGuest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGuestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuestServer).UpdateGuest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Guest_UpdateGuest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuestServer).UpdateGuest(ctx, req.(*UpdateGuestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Guest_DeleteGuestFromParty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuestServer).DeleteGuestFromParty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Guest_DeleteGuestFromParty_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuestServer).DeleteGuestFromParty(ctx, req.(*GuestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Guest_GetShareLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GuestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuestServer).GetShareLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Guest_GetShareLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuestServer).GetShareLink(ctx, req.(*GuestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Guest_AddGuestWithLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LinkQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuestServer).AddGuestWithLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Guest_AddGuestWithLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuestServer).AddGuestWithLink(ctx, req.(*LinkQuery))
	}
	return interceptor(ctx, in, info, handler)
}

// Guest_ServiceDesc is the grpc.ServiceDesc for Guest service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Guest_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "guest.Guest",
	HandlerType: (*GuestServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllGuestFromParty",
			Handler:    _Guest_GetAllGuestFromParty_Handler,
		},
		{
			MethodName: "AddGuestToParty",
			Handler:    _Guest_AddGuestToParty_Handler,
		},
		{
			MethodName: "UpdateGuest",
			Handler:    _Guest_UpdateGuest_Handler,
		},
		{
			MethodName: "DeleteGuestFromParty",
			Handler:    _Guest_DeleteGuestFromParty_Handler,
		},
		{
			MethodName: "GetShareLink",
			Handler:    _Guest_GetShareLink_Handler,
		},
		{
			MethodName: "AddGuestWithLink",
			Handler:    _Guest_AddGuestWithLink_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server/api/guest/guest.proto",
}
