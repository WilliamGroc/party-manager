// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: server/api/party/party.proto

package party

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Party_GetAllParty_FullMethodName    = "/party.Party/GetAllParty"
	Party_CreateParty_FullMethodName    = "/party.Party/CreateParty"
	Party_GetParty_FullMethodName       = "/party.Party/GetParty"
	Party_UpdateParty_FullMethodName    = "/party.Party/UpdateParty"
	Party_DeleteParty_FullMethodName    = "/party.Party/DeleteParty"
	Party_GetSharedParty_FullMethodName = "/party.Party/GetSharedParty"
)

// PartyClient is the client API for Party service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PartyClient interface {
	GetAllParty(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PartiesResponse, error)
	CreateParty(ctx context.Context, in *CreatePartyRequest, opts ...grpc.CallOption) (*CreatePartyResponse, error)
	GetParty(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*PartyResponse, error)
	UpdateParty(ctx context.Context, in *UpdatePartyRequest, opts ...grpc.CallOption) (*PartyResponse, error)
	DeleteParty(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	GetSharedParty(ctx context.Context, in *GetSharedRequest, opts ...grpc.CallOption) (*PartyResponse, error)
}

type partyClient struct {
	cc grpc.ClientConnInterface
}

func NewPartyClient(cc grpc.ClientConnInterface) PartyClient {
	return &partyClient{cc}
}

func (c *partyClient) GetAllParty(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PartiesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PartiesResponse)
	err := c.cc.Invoke(ctx, Party_GetAllParty_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partyClient) CreateParty(ctx context.Context, in *CreatePartyRequest, opts ...grpc.CallOption) (*CreatePartyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePartyResponse)
	err := c.cc.Invoke(ctx, Party_CreateParty_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partyClient) GetParty(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*PartyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PartyResponse)
	err := c.cc.Invoke(ctx, Party_GetParty_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partyClient) UpdateParty(ctx context.Context, in *UpdatePartyRequest, opts ...grpc.CallOption) (*PartyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PartyResponse)
	err := c.cc.Invoke(ctx, Party_UpdateParty_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partyClient) DeleteParty(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, Party_DeleteParty_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partyClient) GetSharedParty(ctx context.Context, in *GetSharedRequest, opts ...grpc.CallOption) (*PartyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PartyResponse)
	err := c.cc.Invoke(ctx, Party_GetSharedParty_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PartyServer is the server API for Party service.
// All implementations must embed UnimplementedPartyServer
// for forward compatibility.
type PartyServer interface {
	GetAllParty(context.Context, *empty.Empty) (*PartiesResponse, error)
	CreateParty(context.Context, *CreatePartyRequest) (*CreatePartyResponse, error)
	GetParty(context.Context, *GetRequest) (*PartyResponse, error)
	UpdateParty(context.Context, *UpdatePartyRequest) (*PartyResponse, error)
	DeleteParty(context.Context, *GetRequest) (*empty.Empty, error)
	GetSharedParty(context.Context, *GetSharedRequest) (*PartyResponse, error)
	mustEmbedUnimplementedPartyServer()
}

// UnimplementedPartyServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPartyServer struct{}

func (UnimplementedPartyServer) GetAllParty(context.Context, *empty.Empty) (*PartiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllParty not implemented")
}
func (UnimplementedPartyServer) CreateParty(context.Context, *CreatePartyRequest) (*CreatePartyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateParty not implemented")
}
func (UnimplementedPartyServer) GetParty(context.Context, *GetRequest) (*PartyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetParty not implemented")
}
func (UnimplementedPartyServer) UpdateParty(context.Context, *UpdatePartyRequest) (*PartyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParty not implemented")
}
func (UnimplementedPartyServer) DeleteParty(context.Context, *GetRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteParty not implemented")
}
func (UnimplementedPartyServer) GetSharedParty(context.Context, *GetSharedRequest) (*PartyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSharedParty not implemented")
}
func (UnimplementedPartyServer) mustEmbedUnimplementedPartyServer() {}
func (UnimplementedPartyServer) testEmbeddedByValue()               {}

// UnsafePartyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PartyServer will
// result in compilation errors.
type UnsafePartyServer interface {
	mustEmbedUnimplementedPartyServer()
}

func RegisterPartyServer(s grpc.ServiceRegistrar, srv PartyServer) {
	// If the following call pancis, it indicates UnimplementedPartyServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Party_ServiceDesc, srv)
}

func _Party_GetAllParty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartyServer).GetAllParty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Party_GetAllParty_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartyServer).GetAllParty(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Party_CreateParty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePartyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartyServer).CreateParty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Party_CreateParty_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartyServer).CreateParty(ctx, req.(*CreatePartyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Party_GetParty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartyServer).GetParty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Party_GetParty_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartyServer).GetParty(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Party_UpdateParty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePartyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartyServer).UpdateParty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Party_UpdateParty_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartyServer).UpdateParty(ctx, req.(*UpdatePartyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Party_DeleteParty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartyServer).DeleteParty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Party_DeleteParty_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartyServer).DeleteParty(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Party_GetSharedParty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSharedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartyServer).GetSharedParty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Party_GetSharedParty_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartyServer).GetSharedParty(ctx, req.(*GetSharedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Party_ServiceDesc is the grpc.ServiceDesc for Party service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Party_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "party.Party",
	HandlerType: (*PartyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllParty",
			Handler:    _Party_GetAllParty_Handler,
		},
		{
			MethodName: "CreateParty",
			Handler:    _Party_CreateParty_Handler,
		},
		{
			MethodName: "GetParty",
			Handler:    _Party_GetParty_Handler,
		},
		{
			MethodName: "UpdateParty",
			Handler:    _Party_UpdateParty_Handler,
		},
		{
			MethodName: "DeleteParty",
			Handler:    _Party_DeleteParty_Handler,
		},
		{
			MethodName: "GetSharedParty",
			Handler:    _Party_GetSharedParty_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server/api/party/party.proto",
}
